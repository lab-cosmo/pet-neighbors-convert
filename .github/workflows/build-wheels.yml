name: Build wheels

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    # Check all PR


concurrency:
  group: python-wheels-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}


jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }} (torch v${{ matrix.torch-version }})
    strategy:
      matrix:
        torch-version: ["2.3", "2.4", "2.5", "2.6"]
        arch: ["arm64", "x86_64"]
        os: ["ubuntu-22.04", "ubuntu-22.04-arm", "macos-14"]
        exclude:
          # remove mismatched arch/os pairs
          - {os: macos-14, arch: x86_64}
          - {os: ubuntu-22.04, arch: arm64}
          - {os: ubuntu-22.04-arm, arch: x86_64}
        include:
          # add `cibw-arch` to the different configurations
          - name: x86_64 Linux
            os: ubuntu-22.04
            arch: x86_64
            cibw-arch: x86_64
          - name: arm64 Linux
            os: ubuntu-22.04-arm
            arch: arm64
            cibw-arch: aarch64
          - name: arm64 macOS
            os: macos-14
            arch: arm64
            cibw-arch: arm64
          # set the right manylinux image to use
          - {torch-version: '2.3', manylinux-version: "2014"}
          - {torch-version: '2.4', manylinux-version: "2014"}
          - {torch-version: '2.5', manylinux-version: "2014"}
          # only torch >= 2.6 on arm64-linux needs the newer manylinux
          - {torch-version: '2.6', arch: x86_64, manylinux-version: "2014"}
          - {torch-version: '2.6', arch: arm64, manylinux-version: "_2_28"}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: install dependencies
        run: python -m pip install cibuildwheel

      - name: build wheel
        run: python -m cibuildwheel --output-dir ./wheelhouse
        env:
          CIBW_BUILD: cp312-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: "${{ matrix.cibw-arch }}"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux${{ matrix.manylinux-version }}_x86_64
          CIBW_MANYLINUX_AARCH64_IMAGE: quay.io/pypa/manylinux${{ matrix.manylinux-version }}_aarch64
          CIBW_ENVIRONMENT: >
            PIP_EXTRA_INDEX_URL=https://download.pytorch.org/whl/cpu
            MACOSX_DEPLOYMENT_TARGET=11
            PETNC_BUILD_WITH_TORCH_VERSION=${{ matrix.torch-version }}.*
          # do not complain for missing libtorch.so
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            delocate-wheel --ignore-missing-dependencies --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
            auditwheel repair --exclude libtorch.so --exclude libtorch_cpu.so --exclude libc10.so -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v4
        with:
          name: single-version-wheel-${{ matrix.torch-version }}-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  merge-wheels:
    needs: build-wheels
    runs-on: ubuntu-22.04
    name: merge wheels for ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: x86_64 Linux
            os: ubuntu-22.04
            arch: x86_64
          - name: arm64 Linux
            os: ubuntu-22.04-arm
            arch: arm64
          - name: arm64 macOS
            os: macos-14
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: single-version-wheel-*-${{ matrix.os }}-${{ matrix.arch }}
          merge-multiple: false
          path: dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: install dependencies
        run: python -m pip install twine wheel

      - name: merge wheels
        run: |
          # collect all torch versions used for the build
          REQUIRES_TORCH=$(find dist -name "*.whl" -exec unzip -p {} "pet_neighbors_convert-*.dist-info/METADATA" \; | grep "Requires-Dist: torch")
          MERGED_TORCH_REQUIRE=$(python scripts/create-torch-versions-range.py "$REQUIRES_TORCH")

          echo MERGED_TORCH_REQUIRE=$MERGED_TORCH_REQUIRE

          # unpack all single torch versions wheels in the same directory
          mkdir dist/unpacked
          find dist -name "*.whl" -print -exec python -m wheel unpack --dest dist/unpacked/ {} ';'

          sed -i "s/Requires-Dist: torch.*/$MERGED_TORCH_REQUIRE/" dist/unpacked/pet_neighbors_convert-*/pet_neighbors_convert-*.dist-info/METADATA

          echo "\n\n METADATA = \n\n"
          cat dist/unpacked/pet_neighbors_convert-*/pet_neighbors_convert-*.dist-info/METADATA

          # check the right metadata was added to the file. grep will exit with
          # code `1` if the line is not found, which will stop CI
          grep "$MERGED_TORCH_REQUIRE" dist/unpacked/pet_neighbors_convert-*/pet_neighbors_convert-*.dist-info/METADATA

          # repack the directory as a new wheel
          mkdir wheelhouse
          python -m wheel pack --dest wheelhouse/ dist/unpacked/*

      - name: check wheels with twine
        run: twine check wheelhouse/*

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: sdist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: install dependencies
        run: python -m pip install build

      - name: build sdist
        env:
          PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cpu"
        run: python -m build . --outdir=dist/

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  merge-and-release:
    name: Merge and release wheels/sdists
    needs: [merge-wheels, build-sdist]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    environment:
      name: pypi
      url: https://pypi.org/project/pet-neighbors-convert
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheel-*
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          path: wheels
          name: sdist

      - name: Re-upload a single wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheels/*

      - name: Comment with download link
        uses: PicoCentauri/comment-artifact@v1
        if: github.event.pull_request.head.repo.fork == false
        with:
          name: wheels
          description: ⚙️ Download Python wheels for this pull-request (you can install these with pip)

      - name: Publish distribution to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheels

      - name: upload to GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wheels/*.tar.gz
            wheels/*.whl
          prerelease: ${{ contains(github.ref, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

